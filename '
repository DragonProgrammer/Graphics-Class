

#define DEBUG
#ifdef DEBUG
#include <iostream>
using std::cerr;
using std::end;
#define DB_FLAG 1
#define DB(x, level) if(DB_FLAG > level)do{cerr<<x<<endl;}while(0)
#else
#define DB(x) do{}while(0)
#endif
#include <math.h>
#include "frame.h"
#include "rd_display.h"
#include "rd_direct.h"
#include "globals.h"
#include <vector>
#include <iostream>
#include "transformations.h"
using std::cout;
using std::sqrt;
using std::endl;
using std::to_string;
using std::vector;
int current_id = -1;
int active_flag = 0;
int back_flag = 0;
Frame current = Frame(background);
//vector<Frame> images;
//vector<int> frame_ids;
color background;
color active;
color match;



 /******************************Frome assign 2****************/

typedef vector< vector<float> > xform;
typedef vector<float> point;
double Camera_View;// = 90;
xform current_xform;// transforms.identity();
point camera_eye;// {0,0,0};
float camera_near;// 1.0;
float camera_far;// 1000000,000.0;
point camera_up;// {0, 1.0, 0)
point at_point; // {0, 0, -1.0};

point last_point;

xform W2C;
xform C2C;
xform C2D;
vector<xform> xform_stack;


point point_pipeline(float x, float y, float z){
	transforms t;
	point input;
	input.push_back(x);
	input.push_back(y);
	input.push_back(z);
	input.push_back(1);
	xform P = current_xform;
	point PP = t.multiply_point(P,input);	
	xform P1 = W2C;
	point PP1 = t.multiply_point(P1, PP);
	// do check stuff
	
	xform P2 = C2C;
	point PP2 = t.multiply_point(P2, PP1);
	xform P3 = C2D;
	point PP3 = t.multiply_point(P3, PP2);
	return PP3;
}
	
void line_pipeline(point p1, char FLAG){
	REDirect r;

	transforms t;
	point input;
	input.push_back(p1[0]);
	input.push_back(p1[1]);
	input.push_back(p1[2]);
	DB(input[0] << " " << input[1],0);
		float W = 0;
//	W += input[0]*input[0];
//	W += input[1]*input[1];
//	W += input[2]*input[2];
//	W = sqrt(W);
//	if(W == 0){W = 1;}
//	input[0] = input[0]/W;
//	input[0] = input[1]/W;
//	input[0] = input[2]/W;
	input.push_back(1);
//	DB("made input point",0);
	xform P = current_xform;
	for(int r =0; r <4; r++){
//		for(int c =0; c <4; c++)
//			cout << P[r][c] << "   ";
//		cout << endl;
	}
//	DB("made curent xform",0);
//
//	DB("Point before curent xform:",2);
//	DB(input[0] << " " << input[1] << " " << input[2] << " " << input[3],2);
	point PP = t.multiply_point(P,input);	
//	DB("Point after curent xform:",2);
//	DB(PP[0] << " " << PP[1] << " " << PP[2] << " " << PP[3],2);
//	DB("mathed point",0);
	xform P1 = W2C;
//	for(int r =0; r <4; r++){
//		for(int c =0; c <4; c++)
//			cout << P1[r][c] << "   ";
//		cout << endl;
//	}
	point clipping_point1 = t.multiply_point(P1, PP);

//	DB(clipping_point1[0] << " " << clipping_point1[1],0);
	if(FLAG == 'M')
		last_point = clipping_point1;
//		last_point = input;		
	if(FLAG == 'D'){

	// set to points to device
		xform P2 = C2C;
//		DB("camer to clip",0);
//	for(int r =0; r <4; r++){
//		for(int c =0; c <4; c++)
//			cout << P2[r][c] << "   ";
//		cout << endl;
//	}

		point PP2 = t.multiply_point(P2, clipping_point1); //curent point
//		DB("point 2 " << PP2[0] << " " << PP2[1],0);
		point PP2B = t.multiply_point(P2, last_point); //saved point
//		DB("point 1 " << PP2B[0] << " " << PP2B[1],0);
		DB("Clip to divice",0);
		xform P3 = C2D;
	for(int r =0; r <4; r++){
		for(int c =0; c <4; c++)
			cout << P3[r][c] << "   ";
		cout << endl;
	}
		point Device_point_2 = t.multiply_point(P3, PP2);
		DB("point 2 before" << input[0] << " " << input[1],10);
//		point Device_point_2 = t.multiply_point(P3, input);
//		DB("point 2 " << Device_point_2[0] << " " << Device_point_2[1],0);
		DB("point 2 before" << last_point[0] << " " << last_point[1],10);
		point Device_point_1 = t.multiply_point(P3, PP2B);
//		DB("point 1 " << Device_point_1[0] << " " << Device_point_1[1],0);


	// line drawing stuff
 		int x1 = Device_point_1[0], x2 = Device_point_2[0];
 	//	int x1 = last_point[0], x2 = input[0];
 		int y1 = Device_point_1[1], y2 = Device_point_2[1];
 	//	int y1 = last_point[1], y2 = input[1];
		int xchan = x2-x1, ychan = y2-y1;
 		DB("piont 1: " << x1 << " " << y1,10);	
 		DB("piont 2: " << x2 << " " << y2,10);	
		if( xchan < 0){
			DB("flipped",0);
			x2 = Device_point_1[0]; 
//			x2 = last_point[0]; 
			x1 = Device_point_2[0] ;
	//		x1 = input[0] ;
			y1 = Device_point_2[1] ;
		//	y1 = last_point[1] ;
			y2 = Device_point_1[1] ;
		//	y2 = input[1] ;
			xchan = x2-x1;
			ychan = y2-y1;
		}
		int p0 = 2*ychan - xchan;
		int inc_plower = 2*ychan, inc_pupper = 2*ychan -2*xchan;
		if(y2 < y1) {
			p0 = 2*xchan - ychan;
			inc_plower = 2*xchan;
			inc_pupper = 2*xchan - 2*ychan;
		}
		int x0 = x1, y0 = y1;
		
		while(x0 < x2){
			

			float to_draw[3] = {float(x0), float(y0),0}; // assuming Z = 0
			r.rd_point(to_draw);
	        	
			if(xchan > 0)
		        	x0++;
			if( p0 < 0)
				p0 += inc_plower;
			else{
                		if(ychan<0) {
					y0--;
		        	if(y0 < y2)
			        	break;
				}
				else{
					y0++;
				if(y0 > y2)
					break;
				}
				p0 += inc_pupper;
			}
        	}

		}


}
 
 void push(xform x1){
	xform_stack.push_back(x1);
}

xform pop(){
	xform to_return = xform_stack[xform_stack.size()-1];
	xform_stack.pop_back();
	return to_return;
}

/*****************from assign 1 *******************/



void set_active(float color[3]){
//cout << "set_active" << endl;
	active.r_scale = color[0];
	active.g_scale = color[1];
	active.b_scale = color[2];
	active = color_convert(active);
	DB("active is " << active, 0);
}

void set_back(float color[3]){

//cout << " endl  << endl;
background.r_scale = color[0];
	background.g_scale = color[1];
	background.b_scale = color[2];
	background = color_convert(background);
	DB("bacground in " <<background, 0);
}
/*
int get_next_id(){
		if(frame_ids.size() == 0){
			return 0; //return 0 if there is curently no ids
		}
		else
		{
			int last_id = frame_ids.back();
			last_id++;
			return last_id; //curently this should always be 1 
	}
	}
*/
void set_pixel(int x, int y){
	DB("in set pixel", 10);	
//	cout << to_string(x) + " " + to_string(y) << endl;
	DB(x << " " << y,0);
	DB( "color before "<<  current.frame_image[x][y],10);
	current.frame_image[int(x)][int(y)]=active;
	DB("I set the pixel", 10);	

//	DB("color after" << current.frame_image[x][y]);
}


Frame set_frame(int id){
		
//	cout << "\n set_frame" + to_string(id) << endl;
		float black[3] = {0, 0, 0};
		if(back_flag == 0)
			set_back(black);
		float white[3] = {1,1,1};
		if(active_flag == 0)
			set_active(white);
		active= color_convert(active);
		background = color_convert(background);
		Frame temp = Frame(background);
		vector<color> yline;
		for(int y = 0; y< display_ySize; y++){

			yline.push_back(background);
		}
		vector< vector<color> >  xline;
		for(int x = 0; x< display_xSize; x++){
			xline.push_back(yline);	
		}
	DB("Size = " << display_ySize << " " <<display_xSize, 10);
	temp.frame_image = xline;
	temp.set_id(id);
//		frame_ids.push_back(id);
		current_id = id;

//	cout << temp.frame_image[0][0] << endl;
//	cout << to_string(xline.size()) + " " + to_string(yline.size()) << endl;
		return temp;
	
		}

color color_convert(color scale_input){
	color scale = scale_input;
	scale.r = scale.r_scale*255;	
	scale.g = scale.g_scale*255;	
	scale.b = scale.b_scale*255;
	return scale;
}


color color_scale(color digit_input){
	color scale = digit_input;
	scale.r_scale = scale.r/255;
	scale.g_scale = scale.g/255;
	scale.b_scale = scale.b/255;
	return scale;
}

/************************ fill help****************************/


void set_match(const float point[3]){
	match = current.frame_image[point[0]][point[1]];
	match.r = 0;
	match.g = 0;
	match.b =0;
	match = color_convert(match);
//	DB("mathc is " << match);
}


int check_color(float point[3]){
	color test = current.frame_image[point[0]][point[1]];
//	DB("checking cell " + to_string(point[0]) + " " +  to_string(point[1]) + " in a " + to_string(display_xSize) + " " + to_string(display_ySize) + " grid" );
//	DB("test is " << test);
	if( active.r == test.r &&  active.g == test.g &&  active.b == test.g) {
		return -2;
	}
	else if( match.r == test.r &&  match.g == test.g &&  match.b == test.g){
	 //     DB("match = test");
		return 1;	}
//cout << "these do not match" << endl;
	else if( background.r == test.r &&  background.g == test.g &&  background.b == test.g){
	return -1;
	}
	else 
//	DB("test is " << test); // r value in test flucuates
//	DB("Active is " << active);
		return -3;
}

int find_span(int &new_xs, int &new_xe, float y){
	int left = 1, right = 1;  //to tell mei if i need to move forward or backward
	float point[3] = {float(new_xs), y, 0};
//	DB(to_string(point[0]) + " " +  to_string(point[1]));
	int result = check_color(point);
	if(result == -2){
//		DB("done this one already");
		return -1;
}
	else if(result == -1){
//		DB("this is background");
		return -1;
	}
	else if (result == -3){
//		DB("This a different color");
		return -1;
	}
	else{
	while(left == 1){
		point[0] = new_xs-1;
		if(new_xs-1 < 0)
			break;
//		DB(to_string(point[0]) + " " +  to_string(point[1]));
		result = check_color(point);
		if(new_xs-1 >= 0 && result == 1 ){
		//	DB("left +");
			new_xs--;
		}
		else{
		//	DB("left end");
			left =0;
		}}
	while(right == 1){
		point[0] = new_xe+1;
		if(point[0] >display_xSize-1){
			break;
	}
//		DB(current.frame_image[point[0]][point[1]]);
//		DB(to_string(point[0]) + " " +  to_string(point[1]));
		result = check_color(point);
//		cout << to_string(new_xs) + " " + to_string(new_xe) << endl;
		if(new_xe+1 < display_xSize && result == 1 ){
		//	DB("right +");
			new_xe++;
		}
		else{
		//	DB("right end");
			right = 0;}
	}
		return 1;
	}
}





int flood_fill(float xs, float xe, float y){
	//	DB("passed: xs = " + to_string(xs) + " xe = " + to_string(xe) + " into flood");
	float color[3] = {active.r_scale, active.g_scale, active.b_scale};
	int new_xs, new_xe;
	for(int x = 0; x < display_xSize; x++){
		for(int y = 0; y < display_ySize; y++){
//			DB("cell " + to_string(x) + " " + to_string(y) + "color " << current.frame_image[x][y]);
		}
	}
	float pigment[3];
	pigment[0] = active.r_scale;
	pigment[1] = active.g_scale;
	pigment[2] = active.b_scale;
	
	
	for( int x = xs; x < xe; x++){
	//	DB( "fill :" +  to_string(x) + " " + to_string(y));
		float point[3] = {x, y, 0};
		//rd_display_  set pixel command
		
		
		set_pixel(x, y);
		rd_write_pixel(x, y, pigment);
		
		}
	for( new_xs= new_xe =xs; new_xe < xe; new_xs = new_xe){
		int span = find_span(new_xs, new_xe, y+1);
//		DB(to_string(span));
		if(y+1 <= display_ySize && span == 1){
//		DB("DOWN");
//		DB("passing: xs = " + to_string(new_xs) + " xe = " + to_string(new_xe) + "to flood");
			flood_fill(new_xs, new_xe+1, y+1);
			new_xe++;
		}
		else{
			new_xe++;
		}

	}
//		DB("reseting: new_xs to " + to_string(xs) + " and new_xe to " + to_string(xs) + " and ex is " + to_string(xe));
	for( new_xs= new_xe =xs; new_xe < xe; new_xs = new_xe){
//		DB("reset: new_xs to " + to_string(new_xs) + " and new_xe to " + to_string(new_xe) + "  and ex is " + to_string(xe));
		int span = find_span(new_xs, new_xe, y-1);
//		DB(to_string(span));
		if(y-1 >= 0 && span == 1){
//		DB("UP");
//		DB("passing: xs = " + to_string(new_xs) + " xe = " + to_string(new_xe) + "to flood");
			flood_fill(new_xs, new_xe+1, y-1);
			new_xe++;
		}
		else{
			new_xe++;
		}
	}
//	DB("Exiting flood");
	return 0;
}
